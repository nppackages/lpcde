// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// rcpp_sum
double rcpp_sum(arma::colvec v);
RcppExport SEXP _lpcde_rcpp_sum(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::colvec >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_sum(v));
    return rcpp_result_gen;
END_RCPP
}
// print_all_sumC
std::vector<std::vector<int>> print_all_sumC(int target);
RcppExport SEXP _lpcde_print_all_sumC(SEXP targetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type target(targetSEXP);
    rcpp_result_gen = Rcpp::wrap(print_all_sumC(target));
    return rcpp_result_gen;
END_RCPP
}
// kernel_evalC
double kernel_evalC(arma::vec x, String kernel_type);
RcppExport SEXP _lpcde_kernel_evalC(SEXP xSEXP, SEXP kernel_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< String >::type kernel_type(kernel_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(kernel_evalC(x, kernel_type));
    return rcpp_result_gen;
END_RCPP
}
// poly_baseC
arma::vec poly_baseC(arma::vec x, int p);
RcppExport SEXP _lpcde_poly_baseC(SEXP xSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(poly_baseC(x, p));
    return rcpp_result_gen;
END_RCPP
}
// basis_vecC
arma::vec basis_vecC(arma::vec x, int p, int mu);
RcppExport SEXP _lpcde_basis_vecC(SEXP xSEXP, SEXP pSEXP, SEXP muSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type mu(muSEXP);
    rcpp_result_gen = Rcpp::wrap(basis_vecC(x, p, mu));
    return rcpp_result_gen;
END_RCPP
}
// SxmatC
arma::mat SxmatC(arma::mat x_data, int q, String kernel_type);
RcppExport SEXP _lpcde_SxmatC(SEXP x_dataSEXP, SEXP qSEXP, SEXP kernel_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x_data(x_dataSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    Rcpp::traits::input_parameter< String >::type kernel_type(kernel_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(SxmatC(x_data, q, kernel_type));
    return rcpp_result_gen;
END_RCPP
}
// rowSums
arma::vec rowSums(const arma::mat& X);
RcppExport SEXP _lpcde_rowSums(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(rowSums(X));
    return rcpp_result_gen;
END_RCPP
}
// int_valC
double int_valC(int l, double a, double b, String kernel_type);
RcppExport SEXP _lpcde_int_valC(SEXP lSEXP, SEXP aSEXP, SEXP bSEXP, SEXP kernel_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type l(lSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< String >::type kernel_type(kernel_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(int_valC(l, a, b, kernel_type));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_lpcde_rcpp_sum", (DL_FUNC) &_lpcde_rcpp_sum, 1},
    {"_lpcde_print_all_sumC", (DL_FUNC) &_lpcde_print_all_sumC, 1},
    {"_lpcde_kernel_evalC", (DL_FUNC) &_lpcde_kernel_evalC, 2},
    {"_lpcde_poly_baseC", (DL_FUNC) &_lpcde_poly_baseC, 2},
    {"_lpcde_basis_vecC", (DL_FUNC) &_lpcde_basis_vecC, 3},
    {"_lpcde_SxmatC", (DL_FUNC) &_lpcde_SxmatC, 3},
    {"_lpcde_rowSums", (DL_FUNC) &_lpcde_rowSums, 1},
    {"_lpcde_int_valC", (DL_FUNC) &_lpcde_int_valC, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_lpcde(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
